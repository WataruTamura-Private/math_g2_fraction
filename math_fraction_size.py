# -*- coding: utf-8 -*-
"""math_fraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10A6HPy26IxsbO_KaTdGB0IAx4jRpAaFk
"""

import random

# List of dog images for the first game
dog_images = [
    "https://images.unsplash.com/photo-1560807707-8cc77767d783",
    "https://images.unsplash.com/photo-1518717758536-85ae29035b6d",
    # Add as many dog image URLs as you want
]

# List of cat images for the second game
cat_images = [
    "https://images.unsplash.com/photo-1514888286974-6c03e2ca1dba",
    "https://images.unsplash.com/photo-1501820488136-72669149e0d4",
    # Add as many cat image URLs as you want
]

# List of cute animals images
animal_images = [
    "https://images.unsplash.com/photo-1548252978-a6e70a3b7d7f",  # Puppy
    "https://images.unsplash.com/photo-1560807707-8cc77767d783",  # Lion cub
    "https://images.unsplash.com/photo-1526336024174-e58f5cdd8e13",  # Kitten
]


# Function to randomly select a dog image
def get_random_dog_image():
    return random.choice(dog_images)

# Function to randomly select a cat image
def get_random_cat_image():
    return random.choice(cat_images)

# Function to randomly select a animal
def get_random_animal_image():
    return random.choice(animal_images)

"""# Pie Fraction Fun!

Welcome to Pie Fraction Fun! In this game, you'll see a pie chart. Your job is to match the chart with the correct fraction from the options provided. Pick wisely, increase your score and become a fraction master! Ready to take the challenge? Let's dive into the world of fractions!
"""

import matplotlib.pyplot as plt
import random
from PIL import Image
import requests
from io import BytesIO
import ipywidgets as widgets
from IPython.display import display, clear_output


correct_counter = 0  # Initialize counter

def display_fraction_visual(fraction, shape='circle'):
    # Assuming fraction is a tuple like (1, 2) for 1/2
    numerator, denominator = fraction
    plt.figure(figsize=(5,5))

    if shape == 'circle':
        plt.pie([1]*denominator, colors=['blue']*numerator + ['white']*(denominator - numerator),
                startangle=90, wedgeprops=dict(edgecolor='black'))
        plt.gca().set_aspect('equal')

    elif shape == 'donut':
        plt.pie([1]*denominator, colors=['blue']*numerator + ['white']*(denominator - numerator),
                startangle=90, wedgeprops=dict(width=0.3, edgecolor='black'))
        plt.gca().set_aspect('equal')

    elif shape == 'rectangle':
        for i in range(denominator):
            color = 'blue' if i < numerator else 'white'
            plt.bar([0], [1], bottom=[i], color=color, edgecolor='black')
        plt.ylim(0, denominator)
        plt.axis('off')

    plt.show()

def on_button_clicked(b):
    global correct_counter, options, correct_fraction
    clear_output()
    if options[ord(b.description[9]) - ord('A')] == correct_fraction:
        correct_counter += 1
        print("Correct!")
        #if correct_counter == 5:
        #    print("Awesome! You've answered 5 questions in a row correctly!")
        #    display(Image(url=get_random_animal_image()))
        #    correct_counter = 0  # Reset counter
        if correct_counter == 5:
            print("Awesome! You've answered 5 questions in a row correctly!")
            response = requests.get(get_random_cat_image())
            img = Image.open(BytesIO(response.content))
            plt.imshow(img)
            plt.axis('off')  # to hide axis
            plt.show()
            correct_counter = 0  # Reset counter
    else:
        print("Wrong answer. Let's try again.")
        correct_counter = 0  # Reset counter if answer is wrong
    display_new_question()

def display_new_question():
    global correct_fraction, options, output, buttons

    fractions = [(1, 2), (2, 3), (3, 5), (1, 3), (3, 4), (2, 5)]  # List of possible fractions

    shape = random.choice(['circle', 'donut', 'rectangle'])
    correct_fraction = random.choice(fractions)
    display_fraction_visual(correct_fraction, shape)

    # Prepare options
    options = [correct_fraction]
    while len(options) < 3:
        fraction = random.choice(fractions)
        if fraction not in options:
            options.append(fraction)

    random.shuffle(options)

    buttons = [widgets.Button(description=f"Fraction {chr(65+i)}: {options[i][0]}/{options[i][1]}") for i in range(3)]
    output = widgets.Output()

    # Create a label with the question
    question_label = widgets.Label("Choose the fraction that matches the blue part of the visual representation above:")

    display(question_label, *buttons, output)

    for button in buttons:
        button.on_click(on_button_clicked)


display_new_question()
